package main

import (
	"bytes"
	"fmt"
	"log"
	"os"
	"time"

	"southwinds.dev/volta"
	"southwinds.dev/volta/audit"
)

func main() {
	fmt.Println("### Example: Encrypting and Decrypting PII with a Tenant Vault ###")
	fmt.Println("üéØ Goal: Demonstrate basic PII encryption/decryption operations with performance metrics")

	// 1. Configure VaultManager Options.
	// The derivation passphrase is a master secret for the entire VaultManager.
	// It must be stored securely and not be hardcoded in production.
	options := volta.Options{
		// In production, load this from a secure source
		// Do not protect the passphrase with another secret, grant access to the passphrase based on a trusted identity
		// e.g. a cloud platform (like AWS, GCP, or Azure) assigns a unique, cryptographic identity to the running application (e.g., an AWS IAM Role for an EC2 instance or ECS container).
		// This identity is managed entirely by the platform and used to access the platform Vault where Volta's passphrase is stored.
		DerivationPassphrase: "Z5vmvP3^6UE*YwvjPZ5qZRJ7FoArSN57MRCQ@9fV2V7y&X3efYXht*LV#vX8",
		// Attempts to lock sensitive data (keys, secrets) in RAM.
		EnableMemoryLock: true,
	}
	fmt.Println("‚úì VaultManager options configured")

	// 2. Initialize the audit logger.
	// This logger records all significant vault management and cryptographic events.
	auditLogger, err := createAuditLogger()
	if err != nil {
		log.Fatalf("‚ùå Failed to create audit logger: %v", err)
	}
	fmt.Println("‚úì Audit logger initialized")

	// 3. Define the base path for vault storage.
	// In a real application, this must be a persistent and secure directory.
	basePath, err := os.MkdirTemp("", "volta_filestore_example_")
	if err != nil {
		log.Fatalf("‚ùå Failed to create temporary directory for base path: %v", err)
	}
	// The temporary directory is cleaned up for this example only.
	defer func(path string) {
		if err = os.RemoveAll(path); err != nil {
			fmt.Printf("‚ö†Ô∏è Failed to remove temporary directory: %v", err)
		} else {
			fmt.Printf("‚úì Temporary directory cleaned up: %s\n", path)
		}
	}(basePath)
	fmt.Printf("‚úì Using temporary vault storage at: %s\n", basePath)

	// 4. Create the VaultManager instance.
	// This manager will orchestrate multiple tenant vaults, each stored as an
	// encrypted file within the specified base path.
	vaultManager := volta.NewVaultManagerFileStore(options, basePath, auditLogger)
	fmt.Println("‚úì VaultManager initialized successfully")

	// --- PII Encryption and Decryption Operations ---
	fmt.Println("\n--- üîê PII Encryption and Decryption Operations ---")
	tenantID := "pii-processor-service"

	// Get a vault instance for a service that handles PII.
	// A new vault is created on the first call for a given tenant.
	fmt.Printf("üîë Obtaining vault for tenant: %s\n", tenantID)
	vaultStartTime := time.Now()
	vault, err := vaultManager.GetVault(tenantID)
	if err != nil {
		log.Fatalf("‚ùå Failed to get vault for tenant %s: %v", tenantID, err)
	}
	vaultInitDuration := time.Since(vaultStartTime)
	fmt.Printf("‚úì Vault obtained for tenant: %s (initialization time: %v)\n", tenantID, vaultInitDuration)

	// Define a sample PII payload to be protected.
	piiData := []byte(`{"name":"Jane Doe","ssn":"000-00-0000","address":"123 Anystreet","phone":"555-1234","email":"jane.doe@example.com"}`)
	fmt.Printf("üìã Original PII data (%d bytes): %s\n", len(piiData), string(piiData))

	// --- ENCRYPTION OPERATION ---
	fmt.Println("\nüîê Starting PII Encryption Operation...")
	encryptStartTime := time.Now()

	// Encrypt the PII. The result is a ciphertext string containing the encrypted
	// data and the ID of the key used, making it self-contained for decryption.
	ciphertext, err := vault.Encrypt(piiData)
	if err != nil {
		log.Fatalf("‚ùå Failed to encrypt PII: %v", err)
	}

	encryptDuration := time.Since(encryptStartTime)
	fmt.Printf("‚úì Encryption completed in %v (%d microseconds)\n", encryptDuration, encryptDuration.Microseconds())
	fmt.Printf("üîí Encrypted ciphertext (%d bytes, safe for storage):\n   %s\n", len(ciphertext), ciphertext)

	// --- DECRYPTION OPERATION ---
	fmt.Println("\nüîì Starting PII Decryption Operation...")
	decryptStartTime := time.Now()

	// Decrypt the ciphertext to retrieve the original PII.
	// Volta automatically uses the correct key based on the ID in the ciphertext.
	decryptedData, err := vault.Decrypt(ciphertext)
	if err != nil {
		log.Fatalf("‚ùå Failed to decrypt ciphertext: %v", err)
	}

	decryptDuration := time.Since(decryptStartTime)
	fmt.Printf("‚úì Decryption completed in %v (%d microseconds)\n", decryptDuration, decryptDuration.Microseconds())
	fmt.Printf("üìã Decrypted PII data (%d bytes): %s\n", len(decryptedData), string(decryptedData))

	// --- DATA INTEGRITY VERIFICATION ---
	fmt.Println("\nüîç Performing Data Integrity Verification...")
	verifyStartTime := time.Now()

	// Verify that the decrypted data matches the original plaintext.
	if !bytes.Equal(piiData, decryptedData) {
		log.Fatal("‚ùå Data integrity check failed: decrypted data does not match original data")
	}

	verifyDuration := time.Since(verifyStartTime)
	fmt.Printf("‚úÖ Data integrity verification successful in %v\n", verifyDuration)
	fmt.Println("‚úì Decrypted data matches original PII perfectly")

	// --- PERFORMANCE SUMMARY ---
	totalOperationTime := encryptDuration + decryptDuration + verifyDuration
	fmt.Println("\n‚è±Ô∏è Performance Summary:")
	fmt.Printf("   ‚Ä¢ Vault Initialization: %v\n", vaultInitDuration)
	fmt.Printf("   ‚Ä¢ Encryption Time:      %v (%d Œºs)\n", encryptDuration, encryptDuration.Microseconds())
	fmt.Printf("   ‚Ä¢ Decryption Time:      %v (%d Œºs)\n", decryptDuration, decryptDuration.Microseconds())
	fmt.Printf("   ‚Ä¢ Verification Time:    %v\n", verifyDuration)
	fmt.Printf("   ‚Ä¢ Total Crypto Ops:    %v\n", totalOperationTime)
	fmt.Printf("   ‚Ä¢ Data Throughput:      %.2f KB/s\n", float64(len(piiData)*2)/totalOperationTime.Seconds()/1024)

	// --- CLEANUP ---
	fmt.Println("\nüßπ Performing Cleanup Operations...")

	// Close the vault to release file handles and clear sensitive data from memory.
	if err = vault.Close(); err != nil {
		fmt.Printf("‚ö†Ô∏è Warning: error closing vault for tenant %s: %v\n", tenantID, err)
	} else {
		fmt.Printf("‚úì Vault for tenant %s closed successfully\n", tenantID)
	}

	fmt.Println("\n### üéâ Example Completed Successfully ###")
	fmt.Println("Summary of Operations:")
	fmt.Println("1. ‚úì Configured VaultManager with secure options")
	fmt.Println("2. ‚úì Initialized file-based audit logging")
	fmt.Println("3. ‚úì Created temporary vault storage")
	fmt.Println("4. ‚úì Obtained tenant-specific vault instance")
	fmt.Println("5. ‚úì Encrypted PII data with performance tracking")
	fmt.Println("6. ‚úì Decrypted ciphertext with performance tracking")
	fmt.Println("7. ‚úì Verified data integrity")
	fmt.Println("8. ‚úì Cleaned up resources")
	fmt.Printf("9. ‚úì Total execution time: %v\n", time.Since(vaultStartTime))

	fmt.Println("\nüìä Key Achievements:")
	fmt.Println("   ‚Ä¢ Demonstrated secure PII encryption/decryption cycle")
	fmt.Println("   ‚Ä¢ Measured cryptographic operation performance")
	fmt.Println("   ‚Ä¢ Validated data integrity throughout the process")
	fmt.Println("   ‚Ä¢ Implemented proper resource cleanup")
}

// createAuditLogger initializes a logger for recording audit events.
func createAuditLogger() (audit.Logger, error) {
	// For this example, logs are written to a local file.
	// In production, consider a more robust logging setup (e.g., structured logs to stdout for collection).
	auditFilePath := ".volta_audit.log"

	fmt.Printf("üîç Initializing file-based audit logger to: %s\n", auditFilePath)
	return audit.NewLogger(&audit.Config{
		Enabled: true,
		Type:    audit.FileAuditType, // A constant representing the file logger type.
		Options: map[string]interface{}{
			"file_path": auditFilePath,
		},
	})
}
